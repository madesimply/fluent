{"version":3,"sources":["../src/fluent.ts"],"sourcesContent":["import { ApiCall, Ctx, Fluent, RequiredContext, StringChain } from \"./types\";\n\n/**\n * Executes a method from the API with the provided context and arguments.\n * @param api - The API object containing the methods.\n * @param ctx - The context object passed to the method.\n * @param call - An object containing the method name and arguments.\n * @returns The result of the method execution.\n */\nfunction runMethod(api: Record<string, any>, ctx: any, call: ApiCall) {\n  const { method, args } = call;\n  const methodFunc: any = method.split(\".\").reduce((acc, key) => acc[key], api);\n  return methodFunc(ctx, ...(args || []));\n}\n\n/**\n * Executes a sequence of API calls, handling promises for asynchronous operations.\n * @param api - The API object containing the methods.\n * @param data - The initial context object.\n * @param firstResult - The result of the first API call.\n * @param calls - An array of subsequent API calls to execute.\n * @returns A promise that resolves to the final context after all calls are executed.\n */\nasync function runPromises(\n  api: Record<string, any>,\n  data: any,\n  firstResult: Promise<any>,\n  calls: ApiCall[]\n) {\n  await firstResult;\n  data = firstResult === undefined ? data : firstResult;\n  for (const call of calls) {\n    const result = runMethod(api, data, call);\n    if (result instanceof Promise) {\n      await result;\n    }\n    data = result === undefined ? data : result;\n  }\n  return data;\n}\n\n/**\n * Finds the index of the next API call in the chain that matches the specified call.\n * @param calls - The list of API calls.\n * @param call - The API call to find in the list.\n * @param current - The current index in the list of API calls.\n * @returns The index of the matching call, or -1 if not found.\n */\nfunction callIndex(calls: ApiCall[], call: ApiCall, current: number) {\n  const remaining = calls.slice(current + 1);\n  const gotoCall = JSON.stringify(call);\n  const nextIndex = remaining.findIndex((c) => JSON.stringify(c) === gotoCall);\n  if (nextIndex > -1) {\n    return nextIndex;\n  }\n  const start = calls.slice(0, current + 1);\n  const prevIndex = start.findIndex(\n    ({ goto, ...c }) => JSON.stringify(c) === gotoCall\n  );\n  return prevIndex;\n}\n\n/**\n * Creates a proxy object that allows fluent method chaining for the given API.\n * @param api - The API object containing methods and properties.\n * @param parentCalls - The list of previous API calls.\n * @param path - The current path of method calls.\n * @param ctx - The context configuration object.\n * @returns A proxy object that supports method chaining.\n */\nfunction createProxy<T extends Record<string, any>>(\n  api: T,\n  parentCalls: ApiCall[],\n  path: string[],\n  ctx: Ctx\n): any {\n  const calls = [...parentCalls];\n\n  const run = (data: any, from = 0) => {\n    let goto = -1;\n    for (let i = from; i < calls.length; i++) {\n      let call = calls[i];\n      if (call.goto && call.goto.args) {\n        const index = callIndex(calls, call.goto.args[0], i);\n        if (index > -1) goto = index;\n      }\n      const result = runMethod(api, data, call);\n      if (result instanceof Promise) {\n        const remaining = calls.slice(calls.indexOf(call) + 1);\n        return runPromises(api, data, result, remaining);\n      }\n      data = result === undefined ? data : result;\n      if (goto > -1) continue;\n    }\n    if (goto > -1) {\n      if (ctx?.fluent?.blocking) {\n        return run(data, goto);\n      }\n      {\n        setTimeout(() => run(data, goto), 0);\n      }\n    }\n    return data;\n  };\n\n  const handler: ProxyHandler<any> = {\n    get(_, prop: string | symbol): any {\n      if (prop === \"run\") return run;\n      if (prop === \"toJSON\") return () => calls;\n      if (prop === \"goto\")\n        return (call: ApiCall) => {\n          const goto = {\n            method: \"goto\",\n            args: JSON.parse(JSON.stringify(call)),\n          };\n          calls[calls.length - 1].goto = goto;\n          return createProxy(api, [...calls], path, ctx);\n        };\n      if (prop === \"toString\") return () => chainToString(calls);\n\n      if (typeof prop !== \"string\") return undefined;\n\n      const baseTarget = prop in api ? api[prop] : undefined;\n      const newPath = baseTarget ? [prop] : [...path, prop];\n      const fullPath = newPath.join(\".\");\n      const targetValue = newPath.reduce((acc, key) => acc[key], api);\n\n      if (typeof targetValue === \"object\" && targetValue !== null) {\n        return createProxy(api, calls, newPath, ctx);\n      }\n\n      if (typeof targetValue === \"function\") {\n        const func = targetValue as Function;\n        if (func.length <= 1) {\n          return createProxy(api, [...calls, { method: fullPath }], path, ctx);\n        }\n        return (...args: any[]) => {\n          return createProxy(\n            api,\n            [...calls, { method: fullPath, args }],\n            path,\n            ctx\n          );\n        };\n      }\n\n      return undefined;\n    },\n  };\n\n  return new Proxy(() => {}, handler);\n}\n\n/**\n * Binds a context object to all functions within an API, allowing them to use the context as `this`.\n * @param api - The API object containing methods and properties.\n * @param ctx - The context object to bind to the API functions.\n * @returns The API object with context-bound functions.\n */\nfunction bindConfigToApi<T extends Record<string, any>>(api: T, ctx: Ctx): T {\n  const boundApi = {} as T;\n\n  for (const key in api) {\n    if (typeof api[key] === \"function\") {\n      // Bind the configuration to the function\n      boundApi[key] = api[key].bind(ctx);\n    } else if (typeof api[key] === \"object\" && api[key] !== null) {\n      // Recursively bind the configuration for nested objects\n      boundApi[key] = bindConfigToApi(api[key], ctx);\n    } else {\n      boundApi[key] = api[key];\n    }\n  }\n\n  return boundApi;\n}\n\n/**\n * Traverses the chain and its arguments. Recursively processes each element, converting serialized chains back into fluent interfaces,\n * and handling primitives, objects, and nested structures as needed.\n * @param chain - The chain to traverse.\n * @param api - The API object containing methods and properties.\n * @param ctx - The context object required by the API methods.\n * @returns The chain with serialized chains and nested structures converted into their appropriate forms.\n */\nexport function initChain<T extends Record<string, any>>(\n  chain: ApiCall[],\n  api: T,\n  ctx: RequiredContext<T>\n): ApiCall[] {\n  return chain.map((call) => {\n    if (call.args) {\n      call.args = call.args.map((arg) => processArgument(arg, api, ctx));\n    }\n    return call;\n  });\n}\n\n/**\n * Processes individual arguments within an API call, handling arrays, objects, and primitives.\n * @param arg - The argument to process.\n * @param api - The API object containing methods and properties.\n * @param ctx - The context object required by the API methods.\n * @returns The processed argument, potentially converted back into a fluent interface.\n */\nfunction processArgument<T extends Record<string, any>>(\n  arg: any,\n  api: T,\n  ctx: RequiredContext<T>\n): any {\n  const isArray = Array.isArray(arg);\n  const isObject = !isArray && typeof arg === \"object\" && arg !== null;\n\n  if (isArray) {\n    // Handle arrays that may contain serialized chains or other arrays\n    if (arg.every((a) => \"method\" in a)) {\n      return fluent({ api, chain: arg, ctx });\n    }\n    return arg.map((item) => processArgument(item, api, ctx)); // Recurse for nested arrays\n  }\n\n  if (isObject) {\n    // Handle objects by recursively processing each property\n    for (const key in arg) {\n      arg[key] = processArgument(arg[key], api, ctx);\n    }\n    return arg;\n  }\n\n  // Return primitive values as-is\n  return arg;\n}\n\n/**\n * Recursively traverses an object to find all method paths and their arities.\n * @param obj - The object to traverse.\n * @param path - The current path in the object.\n * @param paths - The list of method paths and their arities.\n * @returns An array of method paths and their arities.\n */\nfunction getMethodPaths(obj: Record<string, any>, path = \"\", paths: { path: string; arity: number }[] = []) {\n  for (let key in obj) {\n    if (typeof obj[key] === \"function\") {\n      paths.push({ path: path + key, arity: obj[key].length });\n    } else if (typeof obj[key] === \"object\" && obj[key] !== null) {\n      getMethodPaths(obj[key], path + key + \".\", paths);\n    }\n  }\n  return paths.sort((a, b) => b.path.length - a.path.length);\n}\n\n/**\n * Generates a regular expression pattern to match method calls in a string.\n * @param api - The API object containing methods and properties.\n * @returns A regular expression pattern that matches method calls.\n */\nfunction getMethodRegex(api: Record<string, any>): RegExp {\n  const methodPaths = getMethodPaths(api);\n\n  // Sort method paths by length in descending order to prefer longer matches\n  methodPaths.sort((a, b) => b.path.length - a.path.length);\n\n  // Build regex strings for each method path\n  const methodRegexes = methodPaths.map(({ path, arity }) => {\n    const escapedPath = path.replace(/\\./g, \"\\\\.\");\n    // Handle methods with and without arguments differently\n    if (arity === 0) {\n      return `${escapedPath}\\\\b`; // Match method names exactly\n    } else {\n      // For methods with arguments, capture nested parentheses\n      return `${escapedPath}\\\\((?:[^)(]+|\\\\((?:[^)(]+|\\\\([^)(]*\\\\))*\\\\))*\\\\)`;\n    }\n  });\n\n  // Combine all method regexes into one large regex pattern\n  return new RegExp(`(${methodRegexes.join(\"|\")})`, \"g\");\n}\n\n\n/**\n * Parses a method chaining string into an array of API calls.\n * @param chainString - The string representing the method chain.\n * @param api - The API object containing methods and properties.\n * @returns An array of API calls parsed from the string.\n */\nfunction stringToChain<T extends Record<string, any>>(api: T, chain: string, calls: ApiCall[] = []): ApiCall[] {\n    const regex = getMethodRegex(api);\n  \n    if (!regex.test(chain)) return calls;\n  \n    const match = (chain.match(regex) || [])[0];\n  \n    if (!match) return calls;\n  \n    const rest = chain.slice(chain.indexOf(match) + match.length);\n    const method = match.split(\"(\")[0].replace(/^\\./, \"\");\n  \n    const hasArgs = match.includes(\"(\");\n    if (!hasArgs) {\n      calls.push({ method, args: [] });\n      return stringToChain(api, rest, calls);\n    }\n  \n    // root(ns.nestArgs(\"test\"), ns.nestArgs(\"test2\"))\n    let args = match.slice(match.indexOf(\"(\") + 1, match.lastIndexOf(\")\"));\n    if (regex.test(args)) {\n      const matches = [...args.matchAll(getMethodRegex(api))];\n      matches.forEach((innerMatch) => {\n        const result = stringToChain(api, innerMatch[0], calls);\n        args = args.replace(innerMatch[0], JSON.stringify(result));\n      });\n    }\n  \n    args = JSON.parse(`[${args}]`);\n    calls.push({ method, args: args as any });\n  \n    return stringToChain(api, rest, calls);\n  }\n\n/**\n * Converts an array of API calls back into a method chaining string.\n * @param calls - An array of API calls.\n * @returns The method chaining string.\n */\nfunction chainToString(calls: ApiCall[]): string {\n  return calls\n    .map((call) => {\n      const args = call.args?.length ? `(${call.args.join(\", \")})` : \"\";\n      return `${call.method}${args}`;\n    })\n    .join(\".\");\n}\n\n/**\n * Creates a fluent interface for the given API, allowing for method chaining and context management.\n * @param params - The parameters for creating the fluent interface.\n * @param params.api - The API object containing methods and properties.\n * @param params.chain - The initial chain of API calls.\n * @param params.ctx - The context object required by the API methods.\n * @returns A fluent interface for the given API.\n */\nexport function fluent<T extends Record<string, any>>({\n  api,\n  chain = [],\n  ctx,\n}: {\n  api: T;\n  chain?: StringChain | ApiCall[];\n  ctx: RequiredContext<T>;\n}): Fluent<T> {\n  const boundApi = bindConfigToApi(api, ctx || {});\n  const jsonChain =\n    typeof chain === \"string\" ? stringToChain(boundApi, chain, []) : chain;\n  const path = jsonChain.length\n    ? jsonChain.slice(-1)[0].method.split(\".\").slice(0, -1)\n    : [];\n  const parsedChain = chain ? initChain(jsonChain, boundApi, ctx) : [];\n  return createProxy(boundApi, parsedChain, path, ctx || {}) as Fluent<T>;\n}\n"],"mappings":"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","names":[]}