{"version":3,"sources":["../src/fluent.ts"],"sourcesContent":["export type AddApiKeys<T, U> = {\n  [K in keyof U]: FluentApi<U[K], U>;\n};\n\nexport type AddConfigPropAndReturn<T, U> = T extends (...args: any[]) => any\n  ? Parameters<T> extends never[]\n    ? AddConfigPropAndReturn<U, U> & AddApiKeys<T, U>\n    : ((\n        ...args: Parameters<T>\n      ) => AddConfigPropAndReturn<U, U> & AddApiKeys<T, U>) & AddApiKeys<T, U>\n  : {\n      [P in keyof T]: T[P] extends (...args: any[]) => any\n        ? Parameters<T[P]> extends never[]\n          ? AddConfigPropAndReturn<Omit<T, P>, U> & AddApiKeys<T, U>\n          : ((\n              ...args: Parameters<T[P]>\n            ) => AddConfigPropAndReturn<Omit<T, P>, U> & AddApiKeys<T, U>) & AddApiKeys<T, U>\n        : AddConfigPropAndReturn<T[P], U> & AddApiKeys<T, U>;\n    } & AddApiKeys<T, U>;\n\nexport type FluentApi<V, U> = AddConfigPropAndReturn<V, U>;\n\nexport type CombinedFluentApi<T> = {\n  [K in keyof T]: FluentApi<T[K], T>;\n};\n\nexport type ApiCall = { method: string; args?: any[] };\n\nexport function fluent<T extends Record<string, any>>(apiStructure: T): CombinedFluentApi<T> {\n  const createProxy = (parentCalls: ApiCall[] = [], currentPath: string[] = [], currentTarget: any = apiStructure): any => {\n    const calls = [...parentCalls];\n\n    const handler: ProxyHandler<any> = {\n      get(_, prop: string | symbol): any {\n        if (prop === 'toJSON') {\n          return () => calls;\n        }\n\n        if (typeof prop === 'string') {\n          const newPath = [...currentPath, prop];\n          const fullPath = newPath.join('.');\n\n          // Check if the current property is a namespace\n          const isNamespace = typeof currentTarget[prop] === 'object';\n\n          if (isNamespace) {\n            // If it's a namespace, continue building the path without adding to calls\n            return createProxy(calls, newPath, currentTarget[prop]);\n          } else {\n            // Check if the property is a new top-level API\n            if (prop in apiStructure) {\n              // Switch to a new API\n              return createProxy(calls, [prop], apiStructure[prop]);\n            }\n\n            // If it's not a namespace, add it to calls\n            calls.push({ method: fullPath });\n\n            const proxy = new Proxy(function (...args: any[]) {\n              calls[calls.length - 1].args = args;\n              // Keep the full current path\n              return createProxy(calls, currentPath, currentTarget);\n            }, handler);\n\n            return proxy;\n          }\n        }\n\n        return undefined;\n      }\n    };\n\n    const isFunction = typeof currentTarget === \"function\";\n    const func = isFunction ? (...args: any[]) => {\n      calls.push({ method: currentPath.join('.'), args });\n      return createProxy(calls, currentPath, currentTarget);\n    } : () => { };\n\n    const proxy = new Proxy(func, handler);\n    (proxy as any).toJSON = () => calls;\n\n    return proxy;\n  };\n\n  const rootProxy = new Proxy({}, {\n    get(_, prop: string | symbol): any {\n      if (prop === 'toJSON') {\n        return () => [];\n      }\n\n      return createProxy([], [prop as string], apiStructure[prop as string]);\n    }\n  }) as CombinedFluentApi<T>;\n\n  (rootProxy as any).toJSON = () => [];\n\n  return rootProxy;\n}\n\nexport type Ctx = {\n  run: (op: any) => any;\n  ops: Array<{ path: string; args: any[]; result?: any }>;\n} & {\n  [key: string]: any;\n};\n\ntype ExcludeProps<T, K extends keyof any> = {\n  [P in keyof T as P extends K ? never : P]: T[P]\n};\n\ntype NoOpsOrRun<T> = ExcludeProps<T, 'ops' | 'run'>;\n\nexport const run = ({ op, ctx: _ctx, api }: { op: any; ctx: NoOpsOrRun<Ctx>; api: any }): any | Promise<any> => {\n  const config = typeof op === 'string' ? JSON.parse(op) : JSON.parse(JSON.stringify(op));\n\n  if (typeof _ctx !== 'object') {\n    throw new Error('The context object must be an object');\n  }\n\n  if ('run' in _ctx || 'ops' in _ctx) {\n    throw new Error('The context object cannot have properties named \"run\" or \"ops\"');\n  }\n\n  const ctx = _ctx as Ctx;\n\n  Object.defineProperties(ctx, {\n    run: {\n      value: (op: any) => run({ op, ctx, api }),\n      enumerable: false,\n      writable: false,\n      configurable: false\n    },\n    ops: {\n      value: [],\n      enumerable: true,\n      writable: false,\n      configurable: false\n    }\n  });\n\n  const executeOperation = (item: any) => {\n    const { method: path, args = [] } = item;\n    const splitPath = path.split(\".\");\n    const method = splitPath.reduce((acc, key) => acc[key], api);\n    return method(ctx, ...args);\n  };\n\n  const executeChain = async (startIndex: number) => {\n    for (let i = startIndex; i < config.length; i++) {\n      const result = executeOperation(config[i]);\n      if (result instanceof Promise) {\n        const resolvedResult = await result;\n        ctx.ops.push({ path: config[i].method, args: config[i].args, result: resolvedResult });\n      } else {\n        ctx.ops.push({ path: config[i].method, args: config[i].args, result });\n      }\n    }\n    return ctx;\n  };\n\n  for (let i = 0; i < config.length; i++) {\n    const result = executeOperation(config[i]);\n    if (result instanceof Promise) {\n      return executeChain(i).then(() => ctx) as Promise<any>;\n    } else {\n      ctx.ops.push({ path: config[i].method, args: config[i].args, result });\n    }\n  }\n\n  return ctx as any;\n};"],"mappings":"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","names":["proxy","op"]}