{"version":3,"sources":["../src/index.ts","../src/fluent.ts"],"sourcesContent":["export * from \"./fluent\";\nexport * from \"./types\";","import { ApiCall, Ctx, Fluent, RequiredContext } from \"./types\";\n\n/**\n * Executes a method from the API with the provided context and arguments.\n * @param {Record<string, any>} api - The API object containing the methods.\n * @param {any} ctx - The context object passed to the method.\n * @param {ApiCall} call - An object containing the method name and arguments.\n * @returns {any} - The result of the method execution.\n */\nfunction runMethod(api: Record<string, any>, ctx: any, call: ApiCall) {\n  const { method, args } = call;\n  const methodFunc: any = method.split(\".\").reduce((acc, key) => acc[key], api);\n  return methodFunc(ctx, ...(args || []));\n}\n\n/**\n * Executes a sequence of API calls, handling promises for asynchronous operations.\n * @param {Record<string, any>} api - The API object containing the methods.\n * @param {any} data - The initial context object.\n * @param {Promise<any>} firstResult - The result of the first API call.\n * @param {ApiCall[]} calls - An array of subsequent API calls to execute.\n * @returns {Promise<any>} - A promise that resolves to the final context after all calls are executed.\n */\nasync function runPromises(api: Record<string, any>, data: any, firstResult: Promise<any>, calls: ApiCall[]) {\n  data = await firstResult;\n  for (const call of calls) {\n    const result = runMethod(api, data, call);\n    if (result instanceof Promise) {\n      await result;\n    }\n    data = result === undefined ? data : result;\n  }\n  return data;\n}\n\n/**\n * Finds the index of the next API call in the chain that matches the specified call.\n * @param {ApiCall[]} calls - The list of API calls.\n * @param {ApiCall} call - The API call to find in the list.\n * @param {number} current - The current index in the list of API calls.\n * @returns {number} - The index of the matching call, or -1 if not found.\n */\nfunction callIndex(calls: ApiCall[], call: ApiCall, current: number) {\n  const remaining = calls.slice(current + 1);\n  const gotoCall = JSON.stringify(call);\n  const nextIndex = remaining.findIndex((c) => JSON.stringify(c) === gotoCall);\n  if (nextIndex > -1) {\n    return nextIndex;\n  }\n  const start = calls.slice(0, current + 1);\n  const prevIndex = start.findIndex(({ goto, ...c }) => JSON.stringify(c) === gotoCall);\n  return prevIndex;\n}\n\n/**\n * Creates a proxy object that allows fluent method chaining for the given API.\n * @param {T} api - The API object containing methods and properties.\n * @param {ApiCall[]} [parentCalls=[]] - The list of previous API calls.\n * @param {string[]} [path=[]] - The current path of method calls.\n * @param {Ctx} ctx - The context configuration object.\n * @returns {any} - A proxy object that supports method chaining.\n */\nfunction createProxy<T extends Record<string, any>>(api: T, parentCalls: ApiCall[] = [], path: string[] = [], ctx: Ctx): any {\n  const calls = [...parentCalls];\n\n  const run = (data: any, from = 0) => {\n    let goto = -1;\n    for (let i = from; i < calls.length; i++) {\n      let call = calls[i];\n      if (call.goto && call.goto.args) {\n        const index = callIndex(calls, call.goto.args[0], i);\n        if (index > -1) goto = index;\n      }\n      const result = runMethod(api, data, call);\n      if (result instanceof Promise) {\n        const remaining = calls.slice(calls.indexOf(call) + 1);\n        return runPromises(api, data, result, remaining);\n      }\n      data = result === undefined ? data : result;\n      if (goto > -1) continue;\n    }\n    if (goto > -1) {\n      if (ctx?.fluent?.blocking) {\n        return run(data, goto);\n      } {\n        setTimeout(() => run(data, goto), 0);\n      }\n    }\n    return data;\n  };\n\n  const handler: ProxyHandler<any> = {\n    get(_, prop: string | symbol): any {\n      if (prop === \"run\") return run;\n      if (prop === \"toJSON\") return () => calls;\n      if (prop === \"goto\")\n        return (call: ApiCall) => {\n          const goto = {\n            method: \"goto\",\n            args: JSON.parse(JSON.stringify(call)),\n          };\n          calls[calls.length - 1].goto = goto;\n          return createProxy(api, [...calls], path, ctx);\n        };\n\n      if (typeof prop !== \"string\") return undefined;\n\n      const baseTarget = prop in api ? api[prop] : undefined;\n      const newPath = baseTarget ? [prop] : [...path, prop];\n      const fullPath = newPath.join(\".\");\n      const targetValue = newPath.reduce((acc, key) => acc[key], api);\n\n      if (typeof targetValue === \"object\" && targetValue !== null) {\n        return createProxy(api, calls, newPath, ctx);\n      }\n\n      if (typeof targetValue === \"function\") {\n        const func = targetValue as Function;\n        if (func.length <= 1) {\n          return createProxy(api, [...calls, { method: fullPath }], path, ctx);\n        }\n        return (...args: any[]) => {\n          return createProxy(api, [...calls, { method: fullPath, args }], path, ctx);\n        };\n      }\n\n      return undefined;\n    },\n  };\n\n  return new Proxy(() => {}, handler);\n}\n\n/**\n * Binds a context object to all functions within an API, allowing them to use the context as `this`.\n * @param {T} api - The API object containing methods and properties.\n * @param {Ctx} ctx - The context object to bind to the API functions.\n * @returns {T} - The API object with context-bound functions.\n */\nfunction bindConfigToApi<T extends Record<string, any>>(api: T, ctx: Ctx): T {\n  const boundApi = {} as T;\n\n  for (const key in api) {\n    if (typeof api[key] === 'function') {\n      // Bind the configuration to the function\n      boundApi[key] = api[key].bind(ctx);\n    } else if (typeof api[key] === 'object' && api[key] !== null) {\n      // Recursively bind the configuration for nested objects\n      boundApi[key] = bindConfigToApi(api[key], ctx);\n    } else {\n      boundApi[key] = api[key];\n    }\n  }\n\n  return boundApi;\n}\n\n/**\n * Traverses the chain and its arguments. Recursively processes each element, converting serialized chains back into fluent interfaces,\n * and handling primitives, objects, and nested structures as needed.\n * @param {ApiCall[]} chain - The chain to traverse.\n * @param {T} api - The API object containing methods and properties.\n * @param {RequiredContext<T>} ctx - The context object required by the API methods.\n * @returns {ApiCall[]} - The chain with serialized chains and nested structures converted into their appropriate forms.\n */\nexport function initChain<T extends Record<string, any>>(chain: ApiCall[], api: T, ctx: RequiredContext<T>): ApiCall[] {\n  return chain.map(call => {\n    if (call.args) {\n      call.args = call.args.map(arg => processArgument(arg, api, ctx));\n    }\n    return call;\n  });\n}\n\n/**\n * Processes individual arguments within an API call, handling arrays, objects, and primitives.\n * @param {any} arg - The argument to process.\n * @param {T} api - The API object containing methods and properties.\n * @param {RequiredContext<T>} ctx - The context object required by the API methods.\n * @returns {any} - The processed argument, potentially converted back into a fluent interface.\n */\nfunction processArgument<T extends Record<string, any>>(arg: any, api: T, ctx: RequiredContext<T>): any {\n  const isArray = Array.isArray(arg);\n  const isObject = !isArray && typeof arg === 'object' && arg !== null;\n\n  if (isArray) {\n    // Handle arrays that may contain serialized chains or other arrays\n    if (arg.every(a => 'method' in a)) {\n      return fluent({ api, chain: arg, ctx });\n    }\n    return arg.map(item => processArgument(item, api, ctx)); // Recurse for nested arrays\n  } \n\n  if (isObject) {\n    // Handle objects by recursively processing each property\n    for (const key in arg) {\n      arg[key] = processArgument(arg[key], api, ctx);\n    }\n    return arg;\n  }\n\n  // Return primitive values as-is\n  return arg;\n}\n\n/**\n * Creates a fluent interface for the given API, allowing for method chaining and context management.\n * @param {Object} params - The parameters for creating the fluent interface.\n * @param {T} params.api - The API object containing methods and properties.\n * @param {ApiCall[]} [params.chain=[]] - The initial chain of API calls.\n * @param {RequiredContext<T>} params.ctx - The context object required by the API methods.\n * @returns {Fluent<T>} - A fluent interface for the given API.\n */\nexport function fluent<T extends Record<string, any>>({\n  api, \n  chain = [], \n  ctx \n}: { \n  api: T; \n  chain?: ApiCall[]; \n  ctx: RequiredContext<T>;\n}): Fluent<T> {\n  const path = chain.length ? chain.slice(-1)[0].method.split('.').slice(0,-1) : [];\n  const boundApi = bindConfigToApi(api, ctx || {});\n  const parsedChain = chain ? initChain(chain, api, ctx) : [];\n  return createProxy(boundApi, parsedChain, path, ctx || {}) as Fluent<T>;\n}\n"],"mappings":"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","names":["src_exports","__export","fluent","initChain","__toCommonJS","runMethod","api","ctx","call","method","args","acc","key","runPromises","data","firstResult","calls","result","callIndex","current","remaining","gotoCall","nextIndex","c","goto","createProxy","parentCalls","path","run","from","_a","i","index","handler","_","prop","newPath","fullPath","targetValue","bindConfigToApi","boundApi","initChain","chain","arg","processArgument","isArray","isObject","a","fluent","item","parsedChain"]}